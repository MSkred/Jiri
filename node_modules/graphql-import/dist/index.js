"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var lodash_1 = require("lodash");
var fs = require("fs");
var path = require("path");
var definition_1 = require("./definition");
var read = function (f) { return fs.readFileSync(f, { encoding: 'utf8' }); };
function parseImportLine(importLine) {
    var matches = importLine.match(/^import (\*|(.*)) from ('|")(.*)('|")$/);
    if (matches.length !== 6) {
        throw new Error("Too few regex matches: " + matches);
    }
    var wildcard = matches[1], importsString = matches[2], from = matches[4];
    var imports = wildcard === '*' ? ['*'] : importsString.split(',').map(function (d) { return d.trim(); });
    return { imports: imports, from: from };
}
exports.parseImportLine = parseImportLine;
function parseSDL(sdl) {
    return sdl
        .split('\n')
        .map(function (l) { return l.trim(); })
        .filter(function (l) { return l.startsWith('# import') || l.startsWith('#import'); })
        .map(function (l) { return l.replace('#', '').trim(); })
        .map(parseImportLine);
}
exports.parseSDL = parseSDL;
function importSchema(filePath) {
    var sdl = read(filePath);
    var document = graphql_1.parse(sdl);
    var allDefinitions = collectDefinitions(['*'], sdl, path.resolve(filePath));
    document.definitions = allDefinitions;
    return graphql_1.print(document);
}
exports.importSchema = importSchema;
function collectDefinitions(imports, sdl, filePath) {
    var dirname = path.dirname(filePath);
    var rawModules = parseSDL(sdl);
    var document = graphql_1.parse(sdl);
    var currentTypeDefinitions = filterTypeDefinitions(document.definitions);
    var importedTypeDefinitions = lodash_1.flatten(rawModules.map(function (m) {
        var moduleFilePath = path.resolve(path.join(dirname, m.from));
        return collectDefinitions(m.imports, read(moduleFilePath), moduleFilePath);
    }));
    var typeDefinitions = currentTypeDefinitions.concat(importedTypeDefinitions);
    var filteredTypeDefinitions = importDefinitions(imports, typeDefinitions, filePath);
    return definition_1.completeDefinitionPool(typeDefinitions, filteredTypeDefinitions.slice(0), filteredTypeDefinitions.slice(0), filePath);
}
exports.collectDefinitions = collectDefinitions;
function importDefinitions(imports, typeDefinitions, schemaPath) {
    if (imports.includes('*')) {
        return typeDefinitions;
    }
    else {
        var importedDefinitions = typeDefinitions.filter(function (d) {
            return imports.includes(d.name.value);
        });
        return definition_1.completeDefinitionPool(typeDefinitions, importedDefinitions.slice(0), importedDefinitions.slice(0), schemaPath);
    }
}
function filterTypeDefinitions(definitions) {
    var validKinds = [
        'ScalarTypeDefinition',
        'ObjectTypeDefinition',
        'InterfaceTypeDefinition',
        'EnumTypeDefinition',
        'UnionTypeDefinition',
        'InputObjectTypeDefinition',
    ];
    return definitions
        .filter(function (d) { return validKinds.includes(d.kind); })
        .map(function (d) { return d; });
}
//# sourceMappingURL=index.js.map